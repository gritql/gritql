// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SQL builder for mulyquery requests basic example works 1`] = `
Array [
  "select \\"device\\", sum(\\"ano_no_baskets\\") as \\"ano_no_baskets\\", sum(\\"ano_no_all_baskets\\") as \\"ano_no_all_baskets\\", sum(\\"ano_no_unique_products\\") as \\"ano_no_unique_products\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\"",
  "select \\"device\\", \\"date\\", sum(\\"no_baskets\\") as \\"no_baskets\\", sum(\\"no_all_baskets\\") as \\"no_all_baskets\\", sum(\\"no_unique_products\\") as \\"no_unique_products\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\", \\"date\\"",
]
`;

exports[`SQL builder for mulyquery requests basic example works 2`] = `
Array [
  "select \\"device\\", cast(\\"sum\\"(\\"no_of_baskets\\") as float)/NULLIF(cast(\\"sum\\"(\\"no_all_baskets\\") as float), 0)::float4 as \\"avg\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\"",
  "select \\"device\\", \\"date\\", cast(\\"sum\\"(\\"no_of_baskets\\") as float)/NULLIF(cast(\\"sum\\"(\\"no_all_baskets\\") as float), 0)::float4 as \\"avg\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\", \\"date\\"",
]
`;

exports[`SQL builder for mulyquery requests basic example works 3`] = `
Array [
  "select \\"device\\" as \\"custom_name\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12'",
]
`;

exports[`SQL builder for mulyquery requests combine example 1`] = `
Array [
  "select \\"device\\", \\"channel\\", cast(\\"sum\\"(\\"no_of_baskets\\") as float)/NULLIF(cast(\\"sum\\"(\\"no_all_baskets\\") as float), 0)::float4 as \\"avg\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\", \\"channel\\"",
]
`;

exports[`SQL builder for mulyquery requests complex queries using with example works 1`] = `
Array [
  "with \\"productQuery\\" as (select \\"table\\".\\"product\\", sum(\\"value\\") as \\"value\\", \\"table_catalog\\".\\"price\\" as \\"price\\", \\"table_catalog\\".\\"brand\\" as \\"brand\\" from \\"table\\" JOIN \\"table_catalog\\" ON (\\"table_catalog\\".\\"product\\" = \\"table\\".\\"product\\") AND (\\"table_catalog\\".\\"country\\" = \\"table\\".\\"country\\") where ((\\"table\\".\\"date\\" >= '2021-12-13') AND (\\"table\\".\\"date\\" <= '2022-01-09')) AND ((\\"table\\".\\"price\\" >= 10)) AND (\\"table\\".\\"country\\" = 'DE') AND ((\\"table\\".\\"category\\" IN ('Clothes','Fashion')) AND (\\"table\\".\\"category\\" NOT IN('Bags'))) group by \\"table\\".\\"product\\", \\"table_catalog\\".\\"price\\", \\"table_catalog\\".\\"brand\\" order by \\"value\\" desc) select count(distinct \\"brand\\") as \\"count\\" from \\"productQuery\\"",
  "with \\"productQuery\\" as (select \\"table\\".\\"product\\", sum(\\"value\\") as \\"value\\", \\"table_catalog\\".\\"price\\" as \\"price\\", \\"table_catalog\\".\\"brand\\" as \\"brand\\" from \\"table\\" JOIN \\"table_catalog\\" ON (\\"table_catalog\\".\\"product\\" = \\"table\\".\\"product\\") AND (\\"table_catalog\\".\\"country\\" = \\"table\\".\\"country\\") where ((\\"table\\".\\"date\\" >= '2021-12-13') AND (\\"table\\".\\"date\\" <= '2022-01-09')) AND ((\\"table\\".\\"price\\" >= 10)) AND (\\"table\\".\\"country\\" = 'DE') AND ((\\"table\\".\\"category\\" IN ('Clothes','Fashion')) AND (\\"table\\".\\"category\\" NOT IN('Bags'))) group by \\"table\\".\\"product\\", \\"table_catalog\\".\\"price\\", \\"table_catalog\\".\\"brand\\" order by \\"value\\" desc) select \\"brand\\", PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY \\"price\\") AS \\"price\\", sum(\\"value\\")/NULLIF(sum(sum(\\"value\\")) , 0)::float4 as \\"marketShare\\" from \\"productQuery\\" group by \\"brand\\" order by \\"marketShare\\" desc limit 10",
]
`;

exports[`SQL builder for mulyquery requests join using by argument 1`] = `Array []`;

exports[`SQL builder for mulyquery requests mixing the object 1`] = `
Object {
  "desktop": Object {
    "date": Array [
      Object {
        "date": "2020-01-01T23:00:00.000Z",
        "no_baskets": "201",
      },
      Object {
        "date": "2020-01-02T23:00:00.000Z",
        "no_baskets": "207",
      },
    ],
    "no_baskets": "2010",
  },
  "mobile": Object {
    "date": Array [
      Object {
        "date": "2020-01-01T23:00:00.000Z",
        "no_baskets": "101",
      },
      Object {
        "date": "2020-01-02T23:00:00.000Z",
        "no_baskets": "107",
      },
    ],
    "no_baskets": "1070",
  },
}
`;

exports[`SQL builder for mulyquery requests two queries 1`] = `
Array [
  "select \\"device\\", sum(\\"ano_no_baskets\\") as \\"ano_no_baskets\\", sum(\\"ano_no_all_baskets\\") as \\"ano_no_all_baskets\\", sum(\\"ano_no_unique_products\\") as \\"ano_no_unique_products\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\"",
  "select \\"device\\", \\"date\\", sum(\\"no_baskets\\") as \\"no_baskets\\", sum(\\"no_all_baskets\\") as \\"no_all_baskets\\", sum(\\"no_unique_products\\") as \\"no_unique_products\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\", \\"date\\"",
  "select \\"device\\", \\"date\\", sum(\\"no_brand_products\\") as \\"no_brand_products\\", sum(\\"no_uniqie_brand_products\\") as \\"no_uniqie_brand_products\\", sum(\\"total_revenue\\") as \\"total_revenue\\", sum(\\"brand_revenue\\") as \\"brand_revenue\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\", \\"date\\"",
]
`;

exports[`SQL builder for mulyquery requests two queries to object 1`] = `
Object {
  "byDate": Object {
    "desktop": Array [
      Object {
        "date": "2020-01-01T23:00:00.000Z",
        "no_baskets": "201",
      },
      Object {
        "date": "2020-01-02T23:00:00.000Z",
        "no_baskets": "207",
      },
    ],
    "mobile": Array [
      Object {
        "date": "2020-01-01T23:00:00.000Z",
        "no_baskets": "101",
      },
      Object {
        "date": "2020-01-02T23:00:00.000Z",
        "no_baskets": "107",
      },
    ],
  },
  "byDevice": Object {
    "desktop": Object {
      "no_baskets": "2010",
    },
    "mobile": Object {
      "no_baskets": "1070",
    },
  },
}
`;

exports[`SQL fragments Fragment with arguments 1`] = `
Array [
  "select \\"date\\", sum(\\"pageviews\\") as \\"value\\", sum(\\"pageviews\\")/NULLIF(sum(sum(\\"pageviews\\")) , 0)::float4 as \\"share\\" from \\"table\\" where (\\"table\\".\\"brand\\" = 'Adidas') AND ((\\"table\\".\\"date\\" > '2021-01-01') AND (\\"table\\".\\"date\\" < '2022-01-01')) AND (\\"table\\".\\"country\\" = 'US') group by \\"date\\"",
]
`;

exports[`SQL fragments Simple fragment 1`] = `
Array [
  "select \\"date\\", sum(\\"pageviews\\") as \\"value\\", sum(\\"pageviews\\")/NULLIF(sum(sum(\\"pageviews\\")) , 0)::float4 as \\"share\\" from \\"table\\" where (\\"table\\".\\"brand\\" = 'Adidas') AND ((\\"table\\".\\"date\\" > '2021-01-01') AND (\\"table\\".\\"date\\" < '2022-01-01')) AND (\\"table\\".\\"country\\" = 'US') group by \\"date\\"",
]
`;

exports[`SQL gql directives @diff directive 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
]
`;

exports[`SQL gql directives @diff directive 2`] = `
Object {
  "prevSeries": Object {
    "Organic": Object {
      "value": 0.6666666666666667,
    },
    "Social": Object {
      "value": 1,
    },
  },
  "series": Object {
    "Organic": Object {
      "value": -0.4,
    },
    "Social": Object {
      "value": -0.5,
    },
  },
}
`;

exports[`SQL gql directives @divide directive on deep path 1`] = `
Array [
  "select \\"channels\\", \\"country\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\", \\"country\\"",
  "select \\"channels\\", \\"country\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\", \\"country\\"",
]
`;

exports[`SQL gql directives @divide directive on deep path 2`] = `
Object {
  "prevSeries": Array [
    Object {
      "channels": "Social",
      "country": Array [
        Object {
          "country": "DE",
          "rank": 1,
          "value": 1,
        },
      ],
    },
    Object {
      "channels": "Organic",
      "country": Array [
        Object {
          "country": "US",
          "rank": 2,
          "value": 1,
        },
      ],
    },
  ],
  "series": Array [
    Object {
      "channels": "Social",
      "country": Array [
        Object {
          "country": "DE",
          "rank": 2,
          "value": 0.5,
        },
      ],
    },
    Object {
      "channels": "Organic",
      "country": Array [
        Object {
          "country": "DE",
          "rank": 2,
          "value": NaN,
        },
      ],
    },
  ],
}
`;

exports[`SQL gql directives @filter directive 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
]
`;

exports[`SQL gql directives @filter directive 2`] = `
Object {
  "prevSeries": Object {
    "Social": Object {
      "value": 2,
    },
  },
  "series": Object {},
}
`;

exports[`SQL gql directives @filter directive on metrics 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
]
`;

exports[`SQL gql directives @filter directive on metrics 2`] = `
Object {
  "prevSeries": Object {
    "Organic": Object {
      "rank": 2,
      "value": 5,
    },
    "Social": Object {
      "rank": 1,
    },
  },
  "series": Object {
    "Organic": Object {
      "rank": 2,
      "value": 3,
    },
    "Social": Object {
      "rank": 1,
    },
  },
}
`;

exports[`SQL gql directives @groupBy directive 1`] = `
Array [
  "select \\"date\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" group by \\"date\\"",
  "select \\"date\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" group by \\"date\\"",
]
`;

exports[`SQL gql directives @groupBy directive 2`] = `
Object {
  "prevSeries": Array [
    Object {
      "date": "2022-06-27",
      "rank": 2,
      "value": 2,
    },
    Object {
      "date": "2022-06-19",
      "rank": 4,
      "value": 5,
    },
  ],
  "series": Array [
    Object {
      "date": "2022-06-27",
      "rank": 6,
      "value": 4,
    },
    Object {
      "date": "2022-06-13",
      "rank": 4,
      "value": 3,
    },
  ],
}
`;

exports[`SQL gql directives @groupOn directive 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
]
`;

exports[`SQL gql directives @groupOn directive 2`] = `
Object {
  "prevSeries": Object {
    "Organic": Object {
      "value": 5,
    },
    "Other": Object {
      "channels": "Other",
      "value": 2,
    },
  },
  "series": Object {
    "Other": Object {
      "channels": "Other",
      "value": 4,
    },
  },
}
`;

exports[`SQL gql directives @indexed directive 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
]
`;

exports[`SQL gql directives @indexed directive 2`] = `
Object {
  "prevSeries": Object {
    "Organic": Object {
      "value": 1,
    },
    "Social": Object {
      "value": 0.4,
    },
  },
  "series": Object {
    "Organic": Object {
      "value": 0.6,
    },
    "Social": Object {
      "value": 0.2,
    },
  },
}
`;

exports[`SQL gql directives @indexed directive groups 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
]
`;

exports[`SQL gql directives @indexed directive groups 2`] = `
Object {
  "prevSeries": Object {
    "Organic": Object {
      "value": 1,
    },
    "Social": Object {
      "value": 0.4,
    },
  },
  "series": Object {
    "Organic": Object {
      "value": 0.6,
    },
    "Social": Object {
      "value": 0.2,
    },
  },
}
`;

exports[`SQL gql directives @omit directive 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
]
`;

exports[`SQL gql directives @omit directive 2`] = `
Object {
  "prevSeries": Object {
    "Organic": Object {
      "value": 5,
    },
    "Social": Object {
      "value": 2,
    },
  },
  "series": Object {
    "Organic": Object {
      "value": 3,
    },
    "Social": Object {
      "value": 1,
    },
  },
}
`;

exports[`SQL gql directives @subtract directive 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
  "select \\"channels\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\"",
]
`;

exports[`SQL gql directives @subtract directive 2`] = `
Object {
  "prevSeries": Array [
    Object {
      "channels": "Social",
      "rank": 1,
      "value": 0,
    },
    Object {
      "channels": "Organic",
      "rank": 2,
      "value": 0,
    },
  ],
  "series": Array [
    Object {
      "channels": "Social",
      "rank": 2,
      "value": -1,
    },
    Object {
      "channels": "Organic",
      "rank": 2,
      "value": -2,
    },
  ],
}
`;

exports[`SQL gql directives @subtract directive on deep path 1`] = `
Array [
  "select \\"channels\\", \\"country\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\", \\"country\\"",
  "select \\"channels\\", \\"country\\", sum(\\"sessions\\") as \\"value\\", \\"rank\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Adult' and \\"ecom_benchmarking\\".\\"country\\" = 'DE' group by \\"channels\\", \\"country\\"",
]
`;

exports[`SQL gql directives @subtract directive on deep path 2`] = `
Object {
  "prevSeries": Array [
    Object {
      "channels": "Social",
      "country": Array [
        Object {
          "country": "DE",
          "rank": 1,
          "value": 0,
        },
      ],
    },
    Object {
      "channels": "Organic",
      "country": Array [
        Object {
          "country": "US",
          "rank": 2,
          "value": 0,
        },
      ],
    },
  ],
  "series": Array [
    Object {
      "channels": "Social",
      "country": Array [
        Object {
          "country": "DE",
          "rank": 2,
          "value": -1,
        },
      ],
    },
    Object {
      "channels": "Organic",
      "country": Array [
        Object {
          "country": "DE",
          "rank": 2,
          "value": NaN,
        },
      ],
    },
  ],
}
`;

exports[`SQL gqlBuilder function avg 1`] = `
Array [
  "select \\"channels\\", avg(\\"sessions\\")  as \\"avg\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"date\\" = '2020-11-27' and \\"ecom_benchmarking\\".\\"category\\" = 'Finance/Investing' group by \\"channels\\"",
]
`;

exports[`SQL gqlBuilder function avgPerDimension 1`] = `
Array [
  "select sum(\\"sessions\\")::float/COUNT(DISTINCT \\"channels\\")::float4 as \\"avg\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"date\\" = '2020-11-27' and \\"ecom_benchmarking\\".\\"category\\" = 'Finance/Investing'",
]
`;

exports[`SQL gqlBuilder function count 1`] = `
Array [
  "select count(\\"channels\\") as \\"undefined\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"date\\" = '2020-11-27' and \\"ecom_benchmarking\\".\\"category\\" = 'Finance/Investing'",
]
`;

exports[`SQL gqlBuilder function countDistinct 1`] = `
Array [
  "select count(distinct \\"channels\\") as \\"undefined\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"date\\" = '2020-11-27' and \\"ecom_benchmarking\\".\\"category\\" = 'Finance/Investing'",
]
`;

exports[`SQL gqlBuilder function indexed 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\")/NULLIF(max(sum(\\"sessions\\")::float) , 0)::float4 as \\"value\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"date\\" = '2020-11-27' and \\"ecom_benchmarking\\".\\"category\\" = 'Finance/Investing' group by \\"channels\\"",
]
`;

exports[`SQL gqlBuilder function max 1`] = `
Array [
  "select \\"channels\\", max(\\"sessions\\") as \\"max\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"date\\" = '2020-11-27' and \\"ecom_benchmarking\\".\\"category\\" = 'Finance/Investing' group by \\"channels\\"",
]
`;

exports[`SQL gqlBuilder function min 1`] = `
Array [
  "select \\"channels\\", min(\\"sessions\\") as \\"min\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"date\\" = '2020-11-27' and \\"ecom_benchmarking\\".\\"category\\" = 'Finance/Investing' group by \\"channels\\"",
]
`;

exports[`SQL gqlBuilder function share 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\")/NULLIF(sum(sum(\\"sessions\\")) , 0)::float4 as \\"share\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"date\\" = '2020-11-27' and \\"ecom_benchmarking\\".\\"category\\" = 'Finance/Investing' group by \\"channels\\"",
]
`;

exports[`SQL gqlBuilder function share with by argument 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\")/NULLIF(sum(sum(\\"sessions\\")) OVER(PARTITION BY \\"channels\\"), 0)::float4 as \\"share\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"date\\" = '2020-11-27' and \\"ecom_benchmarking\\".\\"category\\" = 'Finance/Investing' group by \\"channels\\"",
]
`;

exports[`SQL gqlBuilder request tuning all together 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\")/NULLIF(sum(sum(\\"sessions\\")) , 0)::float4 as \\"share\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Travel_and_Tourism' and \\"ecom_benchmarking\\".\\"country\\" = 'US' and \\"ecom_benchmarking\\".\\"date\\" > '2020-10-13' and \\"ecom_benchmarking\\".\\"date\\" < '2021-04-13' group by \\"channels\\" order by \\"share\\" desc limit 5 offset 3",
]
`;

exports[`SQL gqlBuilder request tuning groupByEach 1`] = `
Array [
  "select (CAST(FLOOR(CEIL(\\"price\\")/50) AS INT)*50 || '-' || CAST(FLOOR(CEIL(\\"price\\")/50) AS INT)*50+49) AS \\"price\\", (CAST(FLOOR(CEIL(\\"price\\")/50) AS INT)*50) AS \\"groupByEach_min_price\\", (CAST(FLOOR(CEIL(\\"price\\")/50) AS INT)*50+49) AS \\"groupByEach_max_price\\", sum(\\"sessions\\")/NULLIF(sum(sum(\\"sessions\\")) , 0)::float4 as \\"share\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Travel_and_Tourism' and \\"ecom_benchmarking\\".\\"country\\" = 'US' and \\"ecom_benchmarking\\".\\"date\\" > '2020-10-13' and \\"ecom_benchmarking\\".\\"date\\" < '2021-04-13' group by CAST(FLOOR(CEIL(\\"price\\")/50) AS INT) order by \\"share\\" asc",
]
`;

exports[`SQL gqlBuilder request tuning limit 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\")/NULLIF(sum(sum(\\"sessions\\")) , 0)::float4 as \\"share\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Travel_and_Tourism' and \\"ecom_benchmarking\\".\\"country\\" = 'US' and \\"ecom_benchmarking\\".\\"date\\" > '2020-10-13' and \\"ecom_benchmarking\\".\\"date\\" < '2021-04-13' group by \\"channels\\" limit 3",
]
`;

exports[`SQL gqlBuilder request tuning offset 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\")/NULLIF(sum(sum(\\"sessions\\")) , 0)::float4 as \\"share\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Travel_and_Tourism' and \\"ecom_benchmarking\\".\\"country\\" = 'US' and \\"ecom_benchmarking\\".\\"date\\" > '2020-10-13' and \\"ecom_benchmarking\\".\\"date\\" < '2021-04-13' group by \\"channels\\" offset 5",
]
`;

exports[`SQL gqlBuilder request tuning sort_asc 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\")/NULLIF(sum(sum(\\"sessions\\")) , 0)::float4 as \\"share\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Travel_and_Tourism' and \\"ecom_benchmarking\\".\\"country\\" = 'US' and \\"ecom_benchmarking\\".\\"date\\" > '2020-10-13' and \\"ecom_benchmarking\\".\\"date\\" < '2021-04-13' group by \\"channels\\" order by \\"share\\" asc",
]
`;

exports[`SQL gqlBuilder request tuning sort_desc 1`] = `
Array [
  "select \\"channels\\", sum(\\"sessions\\")/NULLIF(sum(sum(\\"sessions\\")) , 0)::float4 as \\"share\\" from \\"ecom_benchmarking\\" where \\"ecom_benchmarking\\".\\"category\\" = 'Travel_and_Tourism' and \\"ecom_benchmarking\\".\\"country\\" = 'US' and \\"ecom_benchmarking\\".\\"date\\" > '2020-10-13' and \\"ecom_benchmarking\\".\\"date\\" < '2021-04-13' group by \\"channels\\" order by \\"share\\" desc",
]
`;

exports[`SQL gqlBuilder single query Basic filters example works 1`] = `
Array [
  "select \\"brand\\", \\"title\\" as \\"title\\" from \\"table\\" where \\"table\\".\\"brand\\" like 'adidas%' and \\"table\\".\\"category\\" in ('1', '11', '12') and \\"table\\".\\"date\\" <= '2022-01-01' and \\"table\\".\\"date\\" >= '2021-01-01' and \\"table\\".\\"price\\" > '126' and \\"table\\".\\"price\\" < '220' group by \\"brand\\", \\"title\\" order by \\"marketShare\\" desc limit 10",
]
`;

exports[`SQL gqlBuilder single query Search filter should work only with pg 1`] = `[Error: Error: Full text search is not supported by snowflake provider]`;

exports[`SQL gqlBuilder single query Search metrics should work only with pg 1`] = `[Error: Error: snowflake provider doesn't support searchHeadline metric]`;

exports[`SQL gqlBuilder single query Search query example works 1`] = `
Array [
  "select \\"brand\\", \\"title\\" as \\"title\\", ts_headline('simple', \\"table\\".\\"title\\", (plainto_tsquery('simple', 'T-shirt')::text || ':*')::tsquery) as \\"headlineTitle\\", ts_rank(to_tsvector('simple', \\"table\\".\\"title\\"), (plainto_tsquery('simple', 'T-shirt')::text || ':*')::tsquery) as \\"rankingTitle\\", ts_headline('simple', \\"table\\".\\"brand\\", (plainto_tsquery('simple', 'Adidas')::text || ':*')::tsquery) as \\"headlineBrand\\", ts_rank(to_tsvector('simple', \\"table\\".\\"brand\\"), (plainto_tsquery('simple', 'Adidas')::text || ':*')::tsquery) as \\"rankingBrand\\" from \\"table\\" where (to_tsvector('simple', \\"table\\".\\"brand\\") @@ (plainto_tsquery('simple', 'Adidas')::text || ':*')::tsquery AND to_tsvector('simple', \\"table\\".\\"title\\") @@ (plainto_tsquery('simple', 'T-shirt')::text || ':*')::tsquery) group by \\"brand\\", \\"title\\" order by \\"marketShare\\" desc limit 10",
]
`;

exports[`SQL gqlBuilder single query Search query using basic filters example works 1`] = `
Array [
  "select \\"brand\\", \\"title\\" as \\"title\\", ts_headline('simple', \\"table\\".\\"title\\", (plainto_tsquery('simple', 'T-shirt')::text || ':*')::tsquery) as \\"headlineTitle\\", ts_rank(to_tsvector('simple', \\"table\\".\\"title\\"), (plainto_tsquery('simple', 'T-shirt')::text || ':*')::tsquery) as \\"rankingTitle\\", ts_headline('simple', \\"table\\".\\"brand\\", (plainto_tsquery('simple', 'Adidas')::text || ':*')::tsquery) as \\"headlineBrand\\", ts_rank(to_tsvector('simple', \\"table\\".\\"brand\\"), (plainto_tsquery('simple', 'Adidas')::text || ':*')::tsquery) as \\"rankingBrand\\" from \\"table\\" where to_tsvector('simple', \\"table\\".\\"brand\\") @@ (plainto_tsquery('simple', 'Adidas')::text || ':*')::tsquery and to_tsvector('simple', \\"table\\".\\"title\\") @@ (plainto_tsquery('simple', 'T-shirt')::text || ':*')::tsquery group by \\"brand\\", \\"title\\" order by \\"marketShare\\" desc limit 10",
]
`;

exports[`SQL gqlBuilder single query basic Array with sorting works 1`] = `
Array [
  "select \\"channel\\", cast(\\"sum\\"(\\"revenue\\") as float)/NULLIF(cast(\\"sum\\"(\\"sessions\\") as float), 0)::float4 as \\"session_value\\" from \\"table\\" where \\"table\\".\\"category\\" = 'whatever' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"channel\\" order by \\"session_value\\" desc",
]
`;

exports[`SQL gqlBuilder single query basic example works 1`] = `
Array [
  "select \\"device\\", \\"date\\", sum(\\"no_baskets\\") as \\"no_baskets\\", sum(\\"no_all_baskets\\") as \\"no_all_baskets\\", sum(\\"no_unique_products\\") as \\"no_unique_products\\", sum(\\"no_brand_products\\") as \\"no_brand_products\\", sum(\\"no_uniqie_brand_products\\") as \\"no_uniqie_brand_products\\", sum(\\"total_revenue\\") as \\"total_revenue\\", sum(\\"brand_revenue\\") as \\"brand_revenue\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\", \\"date\\"",
]
`;

exports[`SQL gqlBuilder single query dimension functions 1`] = `
Array [
  "select \\"device\\", \\"date\\", sum(\\"aggrAverage\\")/max(\\"no_all_baskets\\")::float4  as \\"position_aggrAverage\\" from (select \\"device\\", \\"date\\", \\"position\\", sum(\\"no_baskets\\") as \\"no_baskets\\", sum(\\"no_all_baskets\\") as \\"no_all_baskets\\", \\"position\\" * sum(\\"no_baskets\\") as \\"aggrAverage\\", sum(\\"no_all_baskets\\") as \\"no_all_baskets\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\", \\"date\\", \\"position\\") as \\"middleTable\\" group by \\"device\\", \\"date\\"",
]
`;

exports[`SQL gqlBuilder single query distinct 1`] = `
Array [
  "select distinct \\"device\\" from \\"table\\"",
]
`;

exports[`SQL gqlBuilder single query group date by month 1`] = `
Array [
  "select \\"device\\", \\"date_month\\" as \\"date\\", sum(\\"no_unique_products\\") as \\"no_unique_products\\", sum(\\"no_brand_products\\") as \\"no_brand_products\\" from (select *, date_trunc('month', \\"date\\") as \\"date_month\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12') as \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\", \\"date_month\\"",
]
`;

exports[`SQL gqlBuilder single query handle table name in query 1`] = `
Array [
  "select \\"custom_name\\", \\"device\\" from \\"some_table_name\\" where \\"some_table_name\\".\\"brand\\" = 'Adidas' and \\"some_table_name\\".\\"country\\" = 'US' and \\"some_table_name\\".\\"date\\" > '2020-1-1' and \\"some_table_name\\".\\"date\\" < '2021-7-12' group by \\"custom_name\\"",
  "select \\"custom_name_second\\", \\"device_second\\" from \\"some_other_table_name\\" where \\"some_other_table_name\\".\\"brand\\" = 'Adidas' and \\"some_other_table_name\\".\\"country\\" = 'US' and \\"some_other_table_name\\".\\"date\\" > '2020-1-1' and \\"some_other_table_name\\".\\"date\\" < '2021-7-12' group by \\"custom_name_second\\"",
]
`;

exports[`SQL gqlBuilder single query median 1`] = `
Array [
  "select MEDIAN(\\"price\\")  AS \\"median\\" from \\"table\\"",
]
`;

exports[`SQL gqlBuilder single query metric functions 1`] = `
Array [
  "select \\"device\\", \\"date\\", sum(\\"no_unique_products\\") as \\"no_unique_products\\", sum(\\"no_brand_products\\") as \\"no_brand_products\\", cast(\\"sum\\"(\\"no_baskets\\") as float)/NULLIF(cast(\\"sum\\"(\\"no_all_baskets\\") as float), 0)::float4 as \\"average\\" from \\"table\\" where \\"table\\".\\"brand\\" = 'Adidas' and \\"table\\".\\"country\\" = 'US' and \\"table\\".\\"date\\" > '2020-1-1' and \\"table\\".\\"date\\" < '2021-7-12' group by \\"device\\", \\"date\\"",
]
`;

exports[`SQL gqlBuilder single query percentile 1`] = `
Array [
  "select PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY \\"price\\") AS \\"median\\" from \\"table\\"",
]
`;

exports[`SQL gqlBuilder single query percentile shouldn't run without "a" parameters 1`] = `[Error: Error: Failed arguments type: The arguments \`a\` is marked as required in \`percentile\`, but its value is \`undefined\`.]`;

exports[`SQL gqlBuilder single query ranking 1`] = `
Array [
  "select \\"table\\".\\"rank\\" from (select *, DENSE_RANK() OVER(ORDER BY \\"price\\" DESC) as \\"rank\\" from \\"table\\") as \\"table\\" group by \\"table\\".\\"rank\\"",
]
`;

exports[`SQL merge array on top position 1`] = `
Array [
  Object {
    "country": "FR",
  },
  Object {
    "country": "MX",
  },
  Object {
    "country": "PL",
  },
  Object {
    "country": "ES",
  },
  Object {
    "country": "PT",
  },
  Object {
    "country": "US",
  },
  Object {
    "country": "IT",
  },
  Object {
    "country": "GB",
  },
  Object {
    "country": "DE",
  },
]
`;

exports[`SQL merge basic example works 1`] = `
Object {
  "desktop": Array [
    Object {
      "brand_revenue": "206",
      "date": "2020-01-01T23:00:00.000Z",
      "no_all_baskets": "201",
      "no_baskets": "200",
      "no_brand_products": "203",
      "no_uniqie_brand_products": "204",
      "no_unique_products": "202",
      "total_revenue": "205",
    },
    Object {
      "brand_revenue": "213",
      "date": "2020-01-02T23:00:00.000Z",
      "no_all_baskets": "207",
      "no_baskets": "209",
      "no_brand_products": "210",
      "no_uniqie_brand_products": "211",
      "no_unique_products": "208",
      "total_revenue": "212",
    },
  ],
  "mobile": Array [
    Object {
      "brand_revenue": "106",
      "date": "2020-01-01T23:00:00.000Z",
      "no_all_baskets": "101",
      "no_baskets": "100",
      "no_brand_products": "103",
      "no_uniqie_brand_products": "104",
      "no_unique_products": "102",
      "total_revenue": "105",
    },
    Object {
      "brand_revenue": "113",
      "date": "2020-01-02T23:00:00.000Z",
      "no_all_baskets": "107",
      "no_baskets": "109",
      "no_brand_products": "110",
      "no_uniqie_brand_products": "111",
      "no_unique_products": "108",
      "total_revenue": "112",
    },
  ],
}
`;

exports[`SQL merge date formatting 1`] = `Object {}`;

exports[`SQL merge dimension functions 1`] = `
Object {
  "desktop": Array [
    Object {
      "date": "2020-01-01T23:00:00.000Z",
      "position_aggrAverage": "200",
    },
    Object {
      "date": "2020-01-02T23:00:00.000Z",
      "position_aggrAverage": "209",
    },
  ],
  "mobile": Array [
    Object {
      "date": "2020-01-01T23:00:00.000Z",
      "position_aggrAverage": "100",
    },
    Object {
      "date": "2020-01-02T23:00:00.000Z",
      "position_aggrAverage": "109",
    },
  ],
}
`;

exports[`SQL merge metric functions 1`] = `
Object {
  "desktop": Array [
    Object {
      "average": "202",
      "date": "2020-01-01T23:00:00.000Z",
      "no_brand_products": "201",
      "no_unique_products": "200",
    },
    Object {
      "average": "208",
      "date": "2020-01-02T23:00:00.000Z",
      "no_brand_products": "207",
      "no_unique_products": "209",
    },
  ],
  "mobile": Array [
    Object {
      "average": "102",
      "date": "2020-01-01T23:00:00.000Z",
      "no_brand_products": "101",
      "no_unique_products": "100",
    },
    Object {
      "average": "108",
      "date": "2020-01-02T23:00:00.000Z",
      "no_brand_products": "107",
      "no_unique_products": "109",
    },
  ],
}
`;

exports[`SQL variables && types Custom types directives 1`] = `
Array [
  "select sum(\\"pageviews\\") as \\"value\\" from \\"table\\" where (((((\\"table\\".\\"brand\\" = 'Adidas')) AND ((\\"table\\".\\"price\\" < 2))))) AND ((\\"table\\".\\"date\\" = E'{\\"{\\\\\\\\\\"year\\\\\\\\\\":2021,\\\\\\\\\\"month\\\\\\\\\\":12,\\\\\\\\\\"day\\\\\\\\\\":31}\\",\\"{\\\\\\\\\\"year\\\\\\\\\\":2022,\\\\\\\\\\"month\\\\\\\\\\":9,\\\\\\\\\\"day\\\\\\\\\\":1}\\"}')) AND (\\"table\\".\\"country\\" = 'US')",
]
`;

exports[`SQL variables && types Pre executive @directives @compare 1`] = `
Array [
  "select \\"date\\", \\"device\\", \\"no_baskets\\" from \\"table\\" group by \\"date\\", \\"device\\" limit 2",
]
`;

exports[`SQL variables && types Pre executive @directives @compare 2`] = `
Array [
  "select \\"date\\", \\"device\\", \\"no_baskets\\" as \\"value\\" from \\"table\\" group by \\"date\\", \\"device\\" limit 10",
]
`;

exports[`SQL variables && types Pre executive @directives @compare 3`] = `
Array [
  Array [
    Object {
      "date": "2020-01-01T23:00:00.000Z",
      "desktop": Object {
        "no_baskets": "201",
      },
      "mobile": Object {
        "no_baskets": "101",
      },
    },
    Object {
      "date": "2020-01-02T23:00:00.000Z",
      "desktop": Object {
        "no_baskets": "207",
      },
      "mobile": Object {
        "no_baskets": "107",
      },
    },
  ],
  Array [
    Object {
      "date": "2020-01-01T23:00:00.000Z",
      "desktop": Object {
        "value": "201",
      },
      "mobile": Object {
        "value": "101",
      },
    },
    Object {
      "date": "2020-01-02T23:00:00.000Z",
      "desktop": Object {
        "value": "207",
      },
      "mobile": Object {
        "value": "107",
      },
    },
  ],
]
`;

exports[`SQL variables && types Pre executive @directives @include && @skip 1`] = `
Array [
  "select \\"date\\", \\"device\\", \\"no_baskets\\" from \\"table\\" group by \\"date\\", \\"device\\"",
]
`;

exports[`SQL variables && types Pre executive @directives @include && @skip 2`] = `
Array [
  "select \\"date\\", \\"device\\", \\"no_baskets\\" as \\"value\\" from \\"table\\" group by \\"date\\", \\"device\\"",
]
`;

exports[`SQL variables && types Pre executive @directives @include && @skip 3`] = `
Array [
  Array [
    Object {
      "date": "2020-01-01T23:00:00.000Z",
      "desktop": Object {
        "no_baskets": "201",
      },
      "mobile": Object {
        "no_baskets": "101",
      },
    },
    Object {
      "date": "2020-01-02T23:00:00.000Z",
      "desktop": Object {
        "no_baskets": "207",
      },
      "mobile": Object {
        "no_baskets": "107",
      },
    },
  ],
  Array [
    Object {
      "date": "2020-01-01T23:00:00.000Z",
      "desktop": Object {
        "value": "201",
      },
      "mobile": Object {
        "value": "101",
      },
    },
    Object {
      "date": "2020-01-02T23:00:00.000Z",
      "desktop": Object {
        "value": "207",
      },
      "mobile": Object {
        "value": "107",
      },
    },
  ],
]
`;

exports[`SQL variables && types Union type 1`] = `
Array [
  "select sum(\\"pageviews\\") as \\"value\\" from \\"table\\" where (\\"table\\".\\"brand\\" = 'Adidas') AND ((\\"table\\".\\"date\\" > '2021-01-01') AND (\\"table\\".\\"date\\" < '2022-01-01')) AND (\\"table\\".\\"country\\" = 'US')",
]
`;

exports[`SQL variables && types input type must be traited as exact object type 1`] = `
Array [
  "select sum(\\"pageviews\\") as \\"value\\" from \\"table\\" where (\\"table\\".\\"brand\\" = 'Adidas') AND ((\\"table\\".\\"date\\" > '2021-01-01') AND (\\"table\\".\\"date\\" < '2022-01-01')) AND (\\"table\\".\\"country\\" = 'US')",
]
`;

exports[`SQL variables && types list type must be traited as array type 1`] = `
Array [
  "select sum(\\"pageviews\\") as \\"value\\" from \\"table\\" where (\\"table\\".\\"brand\\" = 'Adidas') AND ((\\"table\\".\\"date\\" > '2021-01-01') AND (\\"table\\".\\"date\\" < '2022-01-01')) AND (\\"table\\".\\"country\\" = 'US') AND ((\\"table\\".\\"categories\\" = 1) AND (\\"table\\".\\"categories\\" = 11) AND (\\"table\\".\\"categories\\" = 6))",
]
`;

exports[`SQL variables && types type must be traited as shape object type 1`] = `
Array [
  "select sum(\\"pageviews\\") as \\"value\\" from \\"table\\" where (\\"table\\".\\"brand\\" = 'Adidas') AND ((\\"table\\".\\"date\\" > '2021-01-01') AND (\\"table\\".\\"date\\" < '2022-01-01')) AND (\\"table\\".\\"country\\" = 'US')",
]
`;
